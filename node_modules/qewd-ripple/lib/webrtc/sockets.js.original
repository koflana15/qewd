var socketsList = {};
var usersList = {};
var patientsList = {};
var appointmentsList = {};

var User = require('./userItem');

function emitError(message, type) {
  var responseObj = {
    type: type || 'error',
    error: message
  };
  this.emit('webrtc', responseObj);
}

var typeHandlers = {

  'user:init': function(messageObj, socket, io, callback) {
    var token = messageObj.token;
    var data = {
      type: 'webrtc:confirmSession',
      token: token
    };
    this.handleMessage(data, function(responseObj) {
      console.log('*** init response: ' + JSON.stringify(responseObj));
      if (responseObj.message.ok) {

        socket.join(token);

        if (usersList[token]) {
          usersList[token].sid.push(socket.id);
        } 
        else {
          usersList[token] = new User(responseObj.message.user, socket.id);
        }
        socketsList[socket.id].user = usersList[token];

        if (usersList[token].isPatient()) {
          patientsList[token] = usersList[token];
          var nhsNumber = responseObj.message.user.nhsNumber;
          if (nhsNumber && patientsWaitersList[nhsNumber]) {
            usersList[token].appointmentId = patientsWaitersList[nhsNumber];
            delete patientsWaitersList[nhsNumber];
            appointmentsList[usersList[token].appointmentId].users.patient = usersList[token];
            appointmentsList[usersList[token].appointmentId].updateAppointment('patient', usersList[token].getFullName());
          }
        }

        if (usersList[token].haveAppointment()) {
          var message = {
            type: 'appointment:init',
            appointmentId: usersList[token].appointmentId,
            token: token
          };
          socket.emit('webrtc', message);
        }

        callback({message: {ok: true}});
      }
      else {
        callback(responseObj);
      }
    });
  },

  'call:init': function(messageObj, socket, io, callback) {
    var token = messageObj.token;
    if (!token || !usersList[token]) {
      callback({error: 'Missing or invalid token'});
      return;
    }    

    var appointmentId = messageObj.appointmentId;
    var appointment = appointmentsList[appointmentId];
    var user = socketsList[socket.id].user;
    var userRole = user.getUserRole();
    //***** temporary

    userRole = 'doctor';
    console.log('userRole = ' + userRole);
    console.log('appointment = ' + JSON.stringify(appointment));
    console.log('user = ' + JSON.stringify(user));
    if (!appointment || !appointment.isCorrectUser(user)) {
      callback({
        type: 'call:close'
      });
      return;
    }

    var opponent = appointment.getOpponentSocketIdByUser(user);

    if (appointment.sid[userRole] && opponent) {
      io.to(appointment.sid[userRole]).emit('webrtc', {type: 'call:busy'});
      appointment.addMessage(null, `${socketsList[socket.id].user.getFullName()} has left the chat room`, Date.now());
      io.to(opponent).emit('webrtc', {
        type: 'call:opponent:left',
        timestamp: Date.now(),
        message: user.getFullName()
      });
    }

    appointment.addMessage(null, `${socketsList[socket.id].user.getFullName()} has entered the chat room`, Date.now());

    appointment.getAppointment(function (err, appointmentInfo) {
      if (err) {
        console.log(err);
        callback({error: err});
        return;
      }
      appointment.getMessages(true, function (err, messages) {
        if (err) {
          console.log(err);
          callback({error: err});
          return;
        }
        socket.emit('webrtc', {
          type: 'call:text:messages:history',
          appointment: appointmentInfo[0], messages
        });
      });
    });

    socket.emit('webrtc', {
      type: 'call:getPatientInfo',
      patientId: appointment.data.patientId
    });

    appointment.sid[userRole] = socket.id;

    socket.emit('webrtc', {
      type: 'call:timer',
      timestamp: appointment.created
    });

    if (!appointment.getOpponentSocketId(socket.id) && appointment.getOpponent(socket.id)) {
      appointment.getOpponent(socket.id).getUniqueSocketsId(io.sockets.sockets).map((sid) => {
        io.to(sid).emit('webrtc', {
          type: 'notification:message',
          title: user.getFullName() + ' has entered the chat room'
        });
      });
    }

    io.to(opponent).emit('webrtc', {
      type: 'call:opponent:join',
      timestamp: Date.now(),
      message: user.getFullName()
    });

    if (appointment.timer !== null) {
      socket.emit('webrtc', {
        type: 'call:close',
        timestamp: appointment.ended,
        created_at: appointment.created,
      });
      return;
    }

    if (appointment.sid.doctor && appointment.sid.patient) {
      io.to(appointment.sid.doctor).emit('webrtc', {
        type: 'call:webrtc:init',
        isInitiator: true
      });
      io.to(appointment.sid.patient).emit('webrtc', {
        type: 'call:webrtc:init',
        isInitiator: false
      });
    }
    callback({ok: true});
  },


};


function handlers(io, socket, q) {

  io.on('connection', function(socket) {
    socketsList[socket.id] = {};
  });

  socket.on('webrtc', function(messageObj) {

    console.log('webrtc message received: ' + JSON.stringify(messageObj));

    if (!socketsList[socket.id]) return;

    var type = messageObj.type;
    var responseObj;
    if (!type) {
      emitError.call(socket, 'Websocket message error: Type property not defined');
      return;
    }

    var token = messageObj.token;
    if (!token || token === '') {
      emitError.call(socket, 'Websocket message error: missing or invalid token');
      return;
    }

    if (!typeHandlers[type]) {
      emitError.call(socket, 'No handler available for type ' + type, type);
      return;
    }

    var response = typeHandlers[type].call(q, messageObj, socket, io, function(responseObj) {
      if (!responseObj.type) responseObj.type = type;
      if (responseObj.finished) delete responseObj.finished;
      if (responseObj.message && responseObj.message.ewd_application) delete responseObj.message.ewd_application;
      socket.emit('webrtc', responseObj);
    });
  });

  /*

  socket.on('user:init', (user) => {
    if (!socketsList[socket.id]) return;

    socket.join(user.username);

    if (usersList[user.username]) {
      usersList[user.username].sid.push(socket.id);
    } else {
      usersList[user.username] = new User(user, socket.id);
    }

    socketsList[socket.id].user = usersList[user.username];

    if (usersList[user.username].isPatient()) {
      patientsList[user.username] = usersList[user.username];
      if (patientsWaitersList[user.nhsNumber]) {
        usersList[user.username].appointmentId = patientsWaitersList[user.nhsNumber];
        delete patientsWaitersList[user.nhsNumber];
        appointmentsList[usersList[user.username].appointmentId].users.patient = usersList[user.username];
        appointmentsList[usersList[user.username].appointmentId].updateAppointment('patient', usersList[user.username].getFullName());
      }
    }

    if (usersList[user.username].haveAppointment()) {
      socket.emit('appointment:init', {
        appointmentId: usersList[user.username].appointmentId
      });
    }
  });




    socket.on('message', function(message) {
      console.log('incoming message: ' + message);
      var room = 'webrtc/index.html';
      io.to(room).emit('message', message);
    })
    
	socket.on('create or join', function (room) {
		var clientsInRoom = io.nsps['/'].adapter.rooms[room];
              var numClients = clientsInRoom === undefined ? 0 : Object.keys(clientsInRoom.sockets).length;

		console.log('Room ' + room + ' has ' + JSON.stringify(numClients) + ' client(s)');
		console.log('Request to create or join room ' + room);

		if (numClients === 0){
			socket.join(room);
			socket.emit('created', room);
		} else if (numClients === 1) {
			io.sockets.in(room).emit('join', room);
			socket.join(room);
			socket.emit('joined', room);
		} else { // max two clients
			socket.emit('full', room);
		}
		socket.emit('emit(): client ' + socket.id + ' joined room ' + room);
		io.to(room).emit('broadcast(): client ' + socket.id + ' joined room ' + room);

	});

  */

}

module.exports = handlers;